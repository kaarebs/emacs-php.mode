(setq inhibit-startup-message t)        ; dont show the GNU splash screen
(transient-mark-mode t)			; show selection from mark
(menu-bar-mode -1)                      ; disable menu bar
(mouse-avoidance-mode 'jump)		; jump mouse away when typing
(setq visible-bell 1)			; turn off bip warnings
(show-paren-mode t)			; turn on highlight paren mode
(auto-compression-mode 1)		; browse tar archives
(put 'upcase-region 'disabled nil)	; enable ``upcase-region''
(put 'set-goal-column 'disabled nil)    ; enable column positioning
(setq case-fold-search t)               ; make search ignore case
(setq-default fill-column 68)           ; shrink auto-fill column a bit
(tool-bar-mode -1)

;; set window title
(setq frame-title-format '("" "%b @ %f"))

;; set smooth scroll
(setq scroll-step 1 scroll-conservatively 10000)

;; Colours
(set-cursor-color "white")
(set-mouse-color "white")
;; (if (locate-library "color-theme")
;;     (load (concat emacs-dir "color-theme-pastelmac"))
;;     (progn
(set-foreground-color "gray90")
(set-background-color "black")
(set-face-foreground 'region "white")
(set-face-background 'region "gray20")
;; ))

;; reload .emacs
(defun load-.emacs () 
  "Runs load-file on ~/.emacs" 
  (interactive)
  (load-file "~/.emacs"))

;; set load path
(let ((default-directory "~/.emacs.d/elisp/"))
      (setq load-path
            (append
             (let ((load-path (copy-sequence load-path))) ;; Shadow
               (append 
                (copy-sequence (normal-top-level-add-to-load-path '(".")))
                (normal-top-level-add-subdirs-to-load-path)))
             load-path)))



;; enable autocomplete
(add-to-list 'load-path "~/.emacs.d/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d//ac-dict")
(ac-config-default)

(add-to-list 'load-path
              "~/git-repos/yasnippet")
(require 'yasnippet)
(yas/global-mode 1)

;; PHP mode ;;
(require 'php-mode)
;; To use abbrev-mode, add lines like this:
(add-hook 'php-mode-hook
'(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))

(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.php5\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.php4\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.php3\\'" . php-mode))

(defun wicked/php-mode-init ()
   "Set some buffer-local variables."
   (setq case-fold-search t)
   (setq indent-tabs-mode nil)
   (setq fill-column 78)
   (setq c-basic-offset 2)
   (c-set-offset 'arglist-cont 0)
   (c-set-offset 'arglist-intro '+)
   (c-set-offset 'case-label 2)
   (c-set-offset 'arglist-close 0))
 (add-hook 'php-mode-hook 'wicked/php-mode-init)

;; html / php switch
;; Toggle between PHP & HTML Helper mode.  Useful when working on
;; php files, that can been intertwined with HTML code
(defun toggle-php-html-mode ()
  (interactive)
  "Toggle mode between PHP & HTML Helper modes"
  (cond ((string= mode-name "HTML helper")
         (php-mode))
        ((string= mode-name "PHP")
         (html-helper-mode))))

(global-set-key [f5] 'toggle-php-html-mode)

(defun company-my-php-backend (command &optional arg &rest ignored)
    (case command
      ('prefix (and (eq major-mode 'php-mode)
                    (company-grab-symbol)))
      ('sorted t)
      ('candidates (all-completions
                    arg 
                    (if (and (boundp 'my-php-symbol-hash)
                             my-php-symbol-hash)
                        my-php-symbol-hash

                      (message "Fetching completion list...")

                      (with-current-buffer
                          (url-retrieve-synchronously "http://php.net/quickref.php")

                        (goto-char (point-min))

                        (if (re-search-forward "<!-- result list start -->" nil t)
                            (let ((end (save-excursion
                                         (if (re-search-forward "<!-- result list end -->" nil t)
                                             (point)))))
                              (if end
                                  (let ((hash (make-hash-table)))
                                    (while (re-search-forward ">\\([^<]+\\)</a>" end t)
                                      (puthash (match-string 1) t hash))
                                    (setq my-php-symbol-hash hash)))))))))))


(add-hook 'php-mode-hook
	  (lambda ()
	    (require 'php-completion)
	    (php-completion-mode t)
	    (define-key php-mode-map (kbd "C-o") 'phpcmp-complete)))

(add-hook  'php-mode-hook
	   (lambda ()
	     (when (require 'auto-complete nil t)
	       (make-variable-buffer-local 'ac-sources)
	       (add-to-list 'ac-sources 'ac-source-php-completion)
	       ;; if you like patial match,
	       ;; use `ac-source-php-completion-patial' instead of `ac-source-php-completion'.
	       (add-to-list 'ac-sources 'ac-source-php-completion-patial)
	       (auto-complete-mode t))))

;; enable flymake
(require 'flymake)

(defun flymake-php-init ()
  "Use php to check the syntax of the current file."
  (let* ((temp (flymake-init-create-temp-buffer-copy 'flymake-create-temp-inplace))
	 (local (file-relative-name temp (file-name-directory buffer-file-name))))
    (list "php" (list "-f" local "-l"))))

(add-to-list 'flymake-err-line-patterns 
  '("\\(Parse\\|Fatal\\) error: +\\(.*?\\) in \\(.*?\\) on line \\([0-9]+\\)$" 3 4 nil 2))

(add-to-list 'flymake-allowed-file-name-masks '("\\.php$" flymake-php-init))

;; Drupal-type extensions
(add-to-list 'flymake-allowed-file-name-masks '("\\.module$" flymake-php-init))
(add-to-list 'flymake-allowed-file-name-masks '("\\.install$" flymake-php-init))
(add-to-list 'flymake-allowed-file-name-masks '("\\.inc$" flymake-php-init))
(add-to-list 'flymake-allowed-file-name-masks '("\\.engine$" flymake-php-init))

(add-hook 'php-mode-hook (lambda () (flymake-mode 1)))
(define-key php-mode-map '[M-S-up] 'flymake-goto-prev-error)
(define-key php-mode-map '[M-S-down] 'flymake-goto-next-error)



;; Set window manager
(require 'e2wm)
(global-set-key (kbd "M-+") 'e2wm:start-management)
(global-set-key (kbd "C-o") 'php-complete-function)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(php-completion-file "~/.emacs.d/php-completion-file"))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

